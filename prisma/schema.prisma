generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["next_auth", "public"]
}

model accounts {
  id                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String?          @db.Uuid
  users              next_auth_users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires      DateTime         @db.Timestamptz(6)
  sessionToken String           @unique(map: "sessiontoken_unique")
  userId       String?          @db.Uuid
  users        next_auth_users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model next_auth_users {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?       @unique(map: "email_unique")
  emailVerified DateTime?     @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]
  users         public_users?

  @@map("users")
  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

model issues {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  title      String
  message    String
  project_id String   @db.Uuid
  user_email String   @default("test@test.com")

  @@schema("public")
}

model ratings {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  rating     BigInt
  message    String?
  project_id String   @db.Uuid
  user_email String   @default("test@test.com")

  @@schema("public")
}

model suggestions {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  title      String
  message    String
  project_id String   @db.Uuid
  user_email String   @default("test@test.com")

  @@schema("public")
}

model public_users {
  id            String          @id @db.Uuid
  name          String
  email         String          @unique
  image         String?
  emailVerified DateTime?       @db.Timestamptz(6)
  created_at    DateTime        @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  project_id    String?         @db.Uuid
  title         String?
  role          String?
  projects      projects[]
  users         next_auth_users @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("users")
  @@schema("public")
}

model projects {
  id                  String       @id(map: "projeects_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime     @default(now()) @db.Timestamptz(6)
  name                String       @unique(map: "projeects_name_key")
  owner_id            String       @db.Uuid
  submission_secret   String       @unique(map: "projeects_submission_secret_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscription_type   String       @default("'hobby'::text")
  subscription_expiry DateTime?    @db.Timestamptz(6)
  users               public_users @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}
