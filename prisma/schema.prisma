generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["next_auth", "public"]
}

model accounts {
  id                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  userId             String?          @db.Uuid
  users              next_auth_users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, providerAccountId], map: "provider_unique")
  @@schema("next_auth")
}

model sessions {
  id           String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires      DateTime         @db.Timestamptz(6)
  sessionToken String           @unique(map: "sessiontoken_unique")
  userId       String?          @db.Uuid
  users        next_auth_users? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("next_auth")
}

model next_auth_users {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String?
  email         String?       @unique(map: "email_unique")
  emailVerified DateTime?     @db.Timestamptz(6)
  image         String?
  accounts      accounts[]
  sessions      sessions[]
  users         public_users?

  @@map("users")
  @@schema("next_auth")
}

model verification_tokens {
  identifier String?
  token      String   @id
  expires    DateTime @db.Timestamptz(6)

  @@unique([token, identifier], map: "token_identifier_unique")
  @@schema("next_auth")
}

model issues {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  title           String
  message         String
  organisation_id String        @db.Uuid
  user_email      String        @default("test@test.com")
  organisations   organisations @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model organisations {
  id                                         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                                 DateTime       @default(now()) @db.Timestamptz(6)
  name                                       String         @unique
  owner_id                                   String?        @db.Uuid
  issues                                     issues[]
  users_organisations_owner_idTousers        public_users?  @relation("organisations_owner_idTousers", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ratings                                    ratings[]
  suggestions                                suggestions[]
  users_users_organisation_idToorganisations public_users[] @relation("users_organisation_idToorganisations")

  @@schema("public")
}

model ratings {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  rating          BigInt
  message         String?
  organisation_id String        @db.Uuid
  user_email      String        @default("test@test.com")
  organisations   organisations @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model suggestions {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  title           String
  message         String
  organisation_id String        @db.Uuid
  user_email      String        @default("test@test.com")
  organisations   organisations @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model public_users {
  id                                                 String          @id @db.Uuid
  name                                               String
  email                                              String          @unique
  image                                              String?
  emailVerified                                      DateTime?       @db.Timestamptz(6)
  created_at                                         DateTime        @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  organisation_id                                    String?         @db.Uuid
  organisations_organisations_owner_idTousers        organisations[] @relation("organisations_owner_idTousers")
  users                                              next_auth_users @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organisations_users_organisation_idToorganisations organisations?  @relation("users_organisation_idToorganisations", fields: [organisation_id], references: [id], onUpdate: NoAction)

  @@map("users")
  @@schema("public")
}
